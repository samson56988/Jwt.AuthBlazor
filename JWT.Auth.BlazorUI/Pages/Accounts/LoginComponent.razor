@page "/login"
@using System.Text.Json
@using System.Text
@using JWT.Auth.BlazorUI.Shared.Providers
@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authStateProvider


<div class="ma-6 d-flex justify-center">
    <MudChip Color="Color.Primary">
        <h3>Login</h3>
    </MudChip>
</div>
<div class="ma-6 d-flex justify-center">
    <MudCard width="500px">
        <MudForm Model="loginModel" @ref="form" Validation="loginValidator.ValidateValue">
            <MudCardContent>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <MudChip Color="Color.Error">
                        <p>@ErrorMessage</p>
                    </MudChip>
                }
                <MudTextField @bind-Value="loginModel.Email"
                              For="@(() => loginModel.Email)"
                              Immediate="true"
                              Label="Email" />

                <MudTextField @bind-Value="loginModel.Password"
                              For="@(() => loginModel.Password)"
                              Immediate="true"
                              Label="Password" InputType="InputType.Password" />

               

            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginAsync" Class="ml-auto">Login</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</div>
@code {

    [CascadingParameter]

    public Task<AuthenticationState> AuthState { get; set; }

    LoginVm loginModel = new LoginVm();

    LoginValidationVm loginValidator = new LoginValidationVm();

    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            _navigation.NavigateTo("/");
        }
        await base.OnInitializedAsync();
    }

    string ErrorMessage = "";
    string APIErrorMessage;
    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayLoad = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayLoad, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("api/user/login", requestContent);

            if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errors = await response.Content.ReadFromJsonAsync<Dictionary<string, List<string>>>();
                if (errors.Count > 0)
                {
                    foreach (var item in errors)
                    {
                        foreach (var errorMessage in item.Value)
                        {
                            ErrorMessage = $"{ErrorMessage} | {errorMessage}";
                        }
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVm>();
                await _localStorageService.SetItemAsync<string>("jwt-access-token", tokenResponse.AccessToken);
                (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                _navigation.NavigateTo("/fetchdata");

            }
            else
            {
                APIErrorMessage = "Failed to register the user, please try after some time";
            }
        }
        else
        {
            ErrorMessage = "Please input valid Email and Password";
        }
    }
}
